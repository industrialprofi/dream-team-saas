#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Dev Container
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bash .devcontainer/validate.sh

set -e

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Dev Container –¥–ª—è Dream Team SaaS"
echo "=" * 60

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }

# –°—á–µ—Ç—á–∏–∫–∏
ERRORS=0
WARNINGS=0

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
echo -e "\n${BLUE}1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤${NC}"
echo "-----------------------------------"

check_file() {
    if [ -f "$1" ]; then
        success "–§–∞–π–ª $1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        error "–§–∞–π–ª $1 –Ω–µ –Ω–∞–π–¥–µ–Ω"
        ((ERRORS++))
    fi
}

check_file ".devcontainer/devcontainer.json"
check_file ".devcontainer/Dockerfile"
check_file "docker-compose.dev.yml"
check_file "Gemfile"
check_file "bin/setup"

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JSON
echo -e "\n${BLUE}2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ devcontainer.json${NC}"
echo "-------------------------------------------"

if command -v python3 &> /dev/null; then
    python3 -c "
import json
import re
import sys

try:
    with open('.devcontainer/devcontainer.json', 'r') as f:
        content = f.read()
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JSON
    content_no_comments = re.sub(r'//.*$', '', content, flags=re.MULTILINE)
    content_no_comments = re.sub(r'/\*.*?\*/', '', content_no_comments, flags=re.DOTALL)
    
    parsed = json.loads(content_no_comments)
    print('‚úÖ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ['name', 'build', 'workspaceFolder']
    for field in required_fields:
        if field in parsed:
            print(f'‚úÖ –ü–æ–ª–µ \"{field}\" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        else:
            print(f'‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ \"{field}\"')
            sys.exit(1)
            
except json.JSONDecodeError as e:
    print(f'‚ùå JSON –æ—à–∏–±–∫–∞: {e.msg} –Ω–∞ —Å—Ç—Ä–æ–∫–µ {e.lineno}')
    sys.exit(1)
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    sys.exit(1)
" || ((ERRORS++))
else
    warning "Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É JSON"
    ((WARNINGS++))
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile
echo -e "\n${BLUE}3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile${NC}"
echo "------------------------"

if [ -f ".devcontainer/Dockerfile" ]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑
    if grep -q "FROM ruby:" ".devcontainer/Dockerfile"; then
        success "–ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ Ruby –Ω–∞–π–¥–µ–Ω"
    else
        error "–ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ Ruby –Ω–µ –Ω–∞–π–¥–µ–Ω"
        ((ERRORS++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è vscode
    if grep -q "vscode" ".devcontainer/Dockerfile"; then
        success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å vscode –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        warning "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å vscode –Ω–µ –Ω–∞–π–¥–µ–Ω"
        ((WARNINGS++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if grep -q "WORKDIR /workspace" ".devcontainer/Dockerfile"; then
        success "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    else
        warning "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        ((WARNINGS++))
    fi
else
    error "Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω"
    ((ERRORS++))
fi

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
echo -e "\n${BLUE}4. –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.dev.yml${NC}"
echo "------------------------------------"

if [ -f "docker-compose.dev.yml" ]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if grep -q "db:" "docker-compose.dev.yml"; then
        success "–°–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω"
    else
        error "–°–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"
        ((ERRORS++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
    if grep -q "postgres:" "docker-compose.dev.yml"; then
        success "PostgreSQL –æ–±—Ä–∞–∑ –Ω–∞–π–¥–µ–Ω"
    else
        error "PostgreSQL –æ–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        ((ERRORS++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º volumes
    if grep -q "volumes:" "docker-compose.dev.yml"; then
        success "Volumes –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    else
        warning "Volumes –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        ((WARNINGS++))
    fi
else
    error "docker-compose.dev.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    ((ERRORS++))
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Ruby
echo -e "\n${BLUE}5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Ruby –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π${NC}"
echo "-------------------------------"

if [ -f "Gemfile" ]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Rails
    if grep -q "rails" "Gemfile"; then
        success "Rails –Ω–∞–π–¥–µ–Ω –≤ Gemfile"
    else
        error "Rails –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Gemfile"
        ((ERRORS++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL gem
    if grep -q "pg" "Gemfile"; then
        success "PostgreSQL gem –Ω–∞–π–¥–µ–Ω"
    else
        error "PostgreSQL gem –Ω–µ –Ω–∞–π–¥–µ–Ω"
        ((ERRORS++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Tailwind CSS
    if grep -q "tailwindcss-rails" "Gemfile"; then
        success "Tailwind CSS Rails –Ω–∞–π–¥–µ–Ω"
    else
        warning "Tailwind CSS Rails –Ω–µ –Ω–∞–π–¥–µ–Ω"
        ((WARNINGS++))
    fi
else
    error "Gemfile –Ω–µ –Ω–∞–π–¥–µ–Ω"
    ((ERRORS++))
fi

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
echo -e "\n${BLUE}6. –ü—Ä–æ–≤–µ—Ä–∫–∞ bin/setup${NC}"
echo "----------------------"

if [ -f "bin/setup" ]; then
    if [ -x "bin/setup" ]; then
        success "bin/setup –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
    else
        warning "bin/setup –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π (chmod +x bin/setup)"
        ((WARNINGS++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    if grep -q "bundle install" "bin/setup"; then
        success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–º–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    else
        warning "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ bin/setup"
        ((WARNINGS++))
    fi
else
    error "bin/setup –Ω–µ –Ω–∞–π–¥–µ–Ω"
    ((ERRORS++))
fi

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo -e "\n${BLUE}7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è${NC}"
echo "-----------------------------------"

if [ -f ".env.template" ]; then
    success ".env.template –Ω–∞–π–¥–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if grep -q "DATABASE_URL" ".env.template"; then
        success "DATABASE_URL –≤ —à–∞–±–ª–æ–Ω–µ"
    else
        warning "DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.template"
        ((WARNINGS++))
    fi
else
    warning ".env.template –Ω–µ –Ω–∞–π–¥–µ–Ω"
    ((WARNINGS++))
fi

if [ -f ".env.local" ]; then
    info ".env.local —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ .gitignore)"
else
    info ".env.local –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)"
fi

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
echo -e "\n${BLUE}8. –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore${NC}"
echo "----------------------"

if [ -f ".gitignore" ]; then
    if grep -q ".env.local" ".gitignore"; then
        success ".env.local –≤ .gitignore"
    else
        warning ".env.local –Ω–µ –≤ .gitignore (–¥–æ–±–∞–≤—å—Ç–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)"
        ((WARNINGS++))
    fi
    
    if grep -q "node_modules" ".gitignore"; then
        success "node_modules –≤ .gitignore"
    else
        warning "node_modules –Ω–µ –≤ .gitignore"
        ((WARNINGS++))
    fi
else
    warning ".gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω"
    ((WARNINGS++))
fi

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
echo -e "\n${BLUE}üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç${NC}"
echo "=================="

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Dev Container –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞! üéâ"
elif [ $ERRORS -eq 0 ]; then
    warning "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ —Å $WARNINGS –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
    echo -e "\n${YELLOW}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${NC}"
    echo "- –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
else
    error "–ù–∞–π–¥–µ–Ω–æ $ERRORS –æ—à–∏–±–æ–∫ –∏ $WARNINGS –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
    echo -e "\n${RED}üö® –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Dev Container${NC}"
    exit 1
fi

echo -e "\n${GREEN}üöÄ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å Dev Container${NC}"
echo "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:"
echo "1. –û—Ç–∫—Ä–æ–π—Ç–µ VS Code: code ."
echo "2. Ctrl+Shift+P -> 'Dev Containers: Reopen in Container'"
echo "3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–±–æ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ bin/setup"
